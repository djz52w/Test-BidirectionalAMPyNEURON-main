######################################################################
# Plot 3D data generated from a bidirectional AM PyNeuron simulation #
######################################################################
# @author geneyu
import h5py
import numpy as np
from mayavi import mlab
import matplotlib.pyplot as plt
from itertools import permutations
np.random.seed(149)

def lfp_point(I0, sigma, loc1, loc2):
    d = euclidean(loc1, loc2)
    return I0 / (4*np.pi*sigma*d)

def euclidean(loc1, loc2):
    return np.sqrt( np.sum( (loc1-loc2)**2 ) )

def NRMSE(x, y):
    return np.sqrt( np.sum((x-y)**2) / np.sum(y**2))

#############
# Load data #
#############
# Name of data file generated by simulation
fname_data = 'data_test_bidirectionalAM_ballandstick_uniformmesh_split.h5'
print(fname_data)
data = {}
with h5py.File(fname_data, 'r') as dset:
    vars = ['membrane voltage', 'membrane current', 'e extracellular']
    for var in vars:
        if var in dset:
            data[var] = {}
            for ID in dset[var]:
                data[var][int(ID)] = {}
                for seg in dset[var][ID]:
                    data[var][int(ID)][seg] = dset[var][ID][seg][:]

    seg_order = {}
    for ID in dset['seg order']:
        seg_order[int(ID)] = dset['seg order'][ID][:].astype(str)

    locs_compartments = {}
    for ID in dset['nrn compartment locs']:
        locs_compartments[int(ID)] = {}
        for seg in dset['nrn compartment locs'][ID]:
            locs_compartments[int(ID)][seg] = dset['nrn compartment locs'][ID][seg][:]

    plot_data = []
    connections = []
    offset = 0
    for rank in dset['cylinder plot data']:
        plot_data.append(dset['cylinder plot data'][rank][:])
        connections.append(dset['cylinder connections'][rank][:].T)
        connections[-1] += offset
        offset += connections[-1].shape[1]

    x, y, z, IDs = np.hstack(plot_data) # microns
    connections = np.hstack(connections).T

    ephaptic_volt = dset['AM voltage'][:] # mV

    if 'stimulus waveform' in dset:
        stim_waveform = dset['stimulus waveform'][:]
        fname_input = dset.attrs['stimulus input file']

    size_data = len(data[var][int(ID)][seg])-1
    time = dset.attrs['dt data']*np.arange(size_data) # ms
    dim = dset.attrs['mesh dimensions']
    res = dset.attrs['voxel resolution microns']
    num_tri = dset.attrs['num tri']

'''
with open(fname_input, 'r') as f:
    stim_volt = f.read()

stim_volt = stim_volt.replace("\n", " ")
stim_volt = stim_volt.replace("  ", " ")
stim_volt = stim_volt.split(" ")
stim_volt = list(filter(None, stim_volt))
stim_volt = np.array(list(map(float, stim_volt)))
stim_volt = stim_volt.reshape((dim[0], dim[1], dim[2]))
stim_volt = stim_volt * 1000 # Convert V to mV
'''
#####################################
# Reconstruct extracellular voltage #
#####################################
x_vox = (np.arange(dim[0])+0.)*res
y_vox = (np.arange(dim[1])+0.)*res
z_vox = (np.arange(dim[2])+0.)*res
X, Y, Z = np.meshgrid(x_vox, y_vox, z_vox)

#v_extracellular = np.outer(stim_waveform, stim_volt).reshape(stim_waveform.shape+stim_volt.shape) + ephaptic_volt

################################################
# Calculate point-source approximation of lfp_ps #
################################################

# Get all neuron coordinates
var_plot = data['membrane current']
r = np.zeros(X.size*len(x))
x_neuron = []
y_neuron = []
z_neuron = []
for ID in locs_compartments:
    for seg in locs_compartments[ID]:
        x_neuron.append(locs_compartments[ID][seg][0])
        y_neuron.append(locs_compartments[ID][seg][1])
        z_neuron.append(locs_compartments[ID][seg][2])

# Figure out bounds of neuron coordinates
x_min =  int(int(min(x_neuron)/res))*res-5*res
y_min = int(int(min(y_neuron)/res))*res-3*res
z_min = int(int(min(z_neuron)/res))*res-0.5*res

x_max = int(int(max(x_neuron)/res))*res+5*res
y_max = int(int(max(y_neuron)/res))*res+5*res
z_max = int(int(max(z_neuron)/res))*res+0.5*res

# Find voxel positions that are within the bounds of the neuron coordinates
idx_grid = np.all(  [X>x_min-1, X<=x_max+1,
                    Y>y_min-1, Y<y_max+1,
                    Z>z_min-1, Z<z_max+1], axis=0)
                    #Z.astype(int) == int(int(z_neuron[0]/res)*res)], axis=0)

#idx_grid = Z.astype(int) == int(int(z_neuron[0]/res)*res)
x_electrode = X[idx_grid].astype(int)
y_electrode = Y[idx_grid].astype(int)
z_electrode = Z[idx_grid].astype(int)

lfp_am = ephaptic_volt[:, idx_grid][:-1]

# Compute point source approximation of LFPs
sigma = 1e-6 # Ohm-m to S/um
lfp_ps = np.zeros((x_electrode.size, size_data))
for idx_elec in range(x_electrode.size):
    loc_electrode = np.array([x_electrode[idx_elec], y_electrode[idx_elec], z_electrode[idx_elec]])
    for ID in locs_compartments:
        for seg in locs_compartments[ID] :
            I = var_plot[ID][seg][:size_data] * 1e-9 # A
            loc_neuron = locs_compartments[ID][seg]
            lfp_ps[idx_elec] += lfp_point(I, sigma, loc_electrode, loc_neuron) * 1000 # mV

# Compute NRMSE
nrmse = np.zeros(x_electrode.size)
for idx_elec in range(x_electrode.size):
    #nrmse[idx_elec] = NRMSE(lfp_am[:, idx_elec]/np.abs(lfp_am[:, idx_elec]).max(), lfp_ps[idx_elec]/np.abs(lfp_ps[idx_elec]).max())
    nrmse[idx_elec] = NRMSE(lfp_am[:, idx_elec], lfp_ps[idx_elec])

print('NRMSE Mean: %.3f' % nrmse.mean())
#ind_best = ('X', 'Y', 'Z')
fig = plt.figure(figsize=(12,10))
fig.subplots_adjust(left=0.05, right=0.97, wspace=0.2, hspace=0.2, top=0.92, bottom=0.07)
ind = 1
#skip = int(np.ceil(x_electrode.size/50))
prob = 50/x_electrode.size
ind = 1
for ii in range(nrmse.size):
    roll = np.random.uniform(0,1)
    if roll < prob:
        _=plt.subplot(5, 10, ind)
        _=plt.title('nrmse: %.2f' % nrmse[ii])
        #_=plt.plot(time, lfp_ps[ind]/np.abs(lfp_ps[ind]).max(), color='k', label='Point Source')
        #_=plt.plot(time, lfp_am[:, ind]/np.abs(lfp_am[:, ind]).max(), color='r', label='AM')
        _=plt.plot(time, lfp_ps[ii], color='k', label='Point Source')
        _=plt.plot(time, lfp_am[:, ii], color='r', label='AM')
        _=plt.xlim(time[0],time[-1])
        #_=plt.ylim(lfp_ps.min()-lfp_ps.max()*0.1, lfp_ps.max()*1.1)
        if ind < 41:
            _=plt.xticks([])
        else:
            _=plt.xlabel('Time (ms)')
        _=plt.yticks([])
        ind += 1
        if ind > 50:
            break

_=plt.suptitle('NRMSE Mean: %.3f' % nrmse.mean())
_=plt.legend()

#fig.savefig('fig_ballandstick_nrmse_res25.png',dpi=300,bbox_inches='tight')

fig_worst = plt.figure(figsize=(12,8))
fig_worst.subplots_adjust(left=0.07, right=0.97, wspace=0.45)
idx = np.argsort(nrmse)
for ii in range(10):
    _=plt.subplot(2, 5, ii+1)
    _=plt.title('nrmse: %.2f\n(%i, %i, %i)' % (nrmse[idx[-(ii+1)]], x_electrode[idx[-(ii+1)]], y_electrode[idx[-(ii+1)]], z_electrode[idx[-(ii+1)]]))
    _=plt.plot(time, lfp_ps[idx[-(ii+1)]], color='k', label='Point Source')
    _=plt.plot(time, lfp_am[:, idx[-(ii+1)]], color='r', label='AM')
    _=plt.xlim(time[0],time[-1])
    #_=plt.ylim(lfp_ps.min()-lfp_ps.max()*0.1, lfp_ps.max()*1.1)
    if ii < 5:
        _=plt.xticks([])
    else:
        _=plt.xlabel('Time (ms)')

_=plt.suptitle('Neuron Location: (%i, %i, %i)' % (x_neuron[0], y_neuron[0], z_neuron[0]))
_=plt.legend()


fig3, ax = plt.subplots()
cax = ax.scatter(x_electrode, y_electrode, c=lfp_am[11], s=200)
_=ax.scatter(x_neuron, y_neuron, s=50, color='k')
_=plt.axis('equal')
cbar = fig3.colorbar(cax)
_=plt.xlabel('X (microns)')
_=plt.ylabel('Y (microns)')
_=plt.title('LFP Amplitudes (AM)\nNRMSE Mean: %.3f' % nrmse.mean(), loc='right')

cbar.set_label('AM LFP Amplitude (mV)', rotation=270,labelpad=35)

fig4, ax = plt.subplots()
cax = ax.scatter(x_electrode, y_electrode, c=lfp_ps[:, 11], s=200)
_=ax.scatter(x_neuron, y_neuron, s=50, color='k')
_=plt.axis('equal')
cbar = fig4.colorbar(cax)
_=plt.xlabel('X (microns)')
_=plt.ylabel('Y (microns)')
_=plt.title('LFP Amplitudes (Point Source Approximation)' , loc='right')
cbar.set_label('PSA LFP Amplitude (mV)', rotation=270,labelpad=35)

'''
fig3.savefig('fig_lfp_distribution_AM_res25.png', dpi=300, bbox_inches='tight')
fig4.savefig('fig_lfp_distribution_psa_res25.png', dpi=300, bbox_inches='tight')
'''

fig3, ax = plt.subplots()
fig3.set_size_inches(8,6)
_=plt.box(False)
_=plt.axis(False)
ax = fig3.add_subplot(projection='3d')
cax = ax.scatter(x_electrode, y_electrode, z_electrode, c=lfp_am[11], s=200)
_=ax.scatter(x_neuron, y_neuron, z_neuron, s=50, color='k')
#cax = ax.scatter(x_electrode, y_electrode, c=lfp_am[11], s=200)
#_=ax.scatter(x_neuron, y_neuron, s=50, color='k')
#_=plt.axis('equal')
cbar = fig3.colorbar(cax)
_=plt.xlabel('X (microns)')
_=plt.ylabel('Y (microns)')
_=plt.title('LFP Amplitudes (AM)' % nrmse.mean())

cbar.set_label('AM LFP Amplitude (mV)', rotation=270,labelpad=35)

fig4, ax = plt.subplots()
fig4.set_size_inches(8,6)
_=plt.box(False)
_=plt.axis(False)
ax = fig4.add_subplot(projection='3d')
cax = ax.scatter(x_electrode, y_electrode, z_electrode, c=lfp_ps[:, 11], s=200)
_=ax.scatter(x_neuron, y_neuron, z_neuron, s=50, color='k')
#cax = ax.scatter(x_electrode, y_electrode, c=lfp_ps[:, 11], s=200)
#_=ax.scatter(x_neuron, y_neuron, s=50, color='k')
#_=plt.axis('equal')
cbar = fig4.colorbar(cax)
_=plt.xlabel('X (microns)')
_=plt.ylabel('Y (microns)')
_=plt.title('LFP Amplitudes (Point Source Approximation)')
cbar.set_label('PSA LFP Amplitude (mV)', rotation=270 ,labelpad=35)

fig5, ax = plt.subplots()
fig5.set_size_inches(8,6)
_=plt.box(False)
_=plt.axis(False)
ax = fig5.add_subplot(projection='3d')
cax = ax.scatter(x_electrode, y_electrode, z_electrode, c=nrmse, s=200)
_=ax.scatter(x_neuron, y_neuron, z_neuron, s=50, color='k')
#cax = ax.scatter(x_electrode, y_electrode, c=lfp_am[11], s=200)
#_=ax.scatter(x_neuron, y_neuron, s=50, color='k')
#_=plt.axis('equal')
cbar = fig5.colorbar(cax)
_=plt.xlabel('X (microns)')
_=plt.ylabel('Y (microns)')
_=plt.title('NRMSE Mean: %.3f' % nrmse.mean())
cbar.set_label('NRMSE', rotation=270,labelpad=35)

#fig.savefig('fig_nrmse_ring.png',dpi=300,bbox_inches='tight')
'''
fig3.savefig('fig_lfp_distribution_AM_hires_3d.png', dpi=300, bbox_inches='tight')
fig4.savefig('fig_lfp_distribution_psa_hires_3d.png', dpi=300, bbox_inches='tight')
fig5.savefig('fig_lfp_distribution_nrmse_hires_3d.png', dpi=300, bbox_inches='tight')
'''
plt.show()

a = 1
# End file
